[{"D:\\pecquora-master\\client\\src\\index.js":"1","D:\\pecquora-master\\client\\src\\App.js":"2","D:\\pecquora-master\\client\\src\\components\\Navbar.jsx":"3","D:\\pecquora-master\\client\\src\\components\\Background.jsx":"4","D:\\pecquora-master\\client\\src\\components\\QuestionList.jsx":"5","D:\\pecquora-master\\client\\src\\components\\QuestionBox.jsx":"6","D:\\pecquora-master\\client\\src\\helper\\axioshelper.js":"7","D:\\pecquora-master\\client\\src\\components\\AnswerBox.jsx":"8","D:\\pecquora-master\\client\\src\\components\\QuestionById.jsx":"9","D:\\pecquora-master\\client\\src\\components\\AnswerLIst.jsx":"10","D:\\pecquora\\client\\src\\index.js":"11","D:\\pecquora\\client\\src\\App.js":"12","D:\\pecquora\\client\\src\\screens\\preloader.jsx":"13","D:\\pecquora\\client\\src\\screens\\SignIn.jsx":"14","D:\\pecquora\\client\\src\\screens\\SignUp.jsx":"15","D:\\pecquora\\client\\src\\screens\\QuestionScreen.jsx":"16","D:\\pecquora\\client\\src\\screens\\find.jsx":"17","D:\\pecquora\\client\\src\\components\\QuestionList.jsx":"18","D:\\pecquora\\client\\src\\components\\QuestionBox.jsx":"19","D:\\pecquora\\client\\src\\components\\Navbar.jsx":"20","D:\\pecquora\\client\\src\\components\\Background.jsx":"21","D:\\pecquora\\client\\src\\helper\\axioshelper.js":"22","D:\\pecquora\\client\\src\\components\\AnswerBox.jsx":"23","D:\\pecquora\\client\\src\\components\\QuestionById.jsx":"24","D:\\pecquora\\client\\src\\components\\AnswerLIst.jsx":"25"},{"size":155,"mtime":1620134417991,"results":"26","hashOfConfig":"27"},{"size":2169,"mtime":1620655406743,"results":"28","hashOfConfig":"27"},{"size":2124,"mtime":1620655448477,"results":"29","hashOfConfig":"27"},{"size":261,"mtime":1620257340942,"results":"30","hashOfConfig":"27"},{"size":3288,"mtime":1620521257109,"results":"31","hashOfConfig":"27"},{"size":1914,"mtime":1620359491253,"results":"32","hashOfConfig":"27"},{"size":102,"mtime":1620134418596,"results":"33","hashOfConfig":"27"},{"size":2014,"mtime":1620349236849,"results":"34","hashOfConfig":"27"},{"size":2221,"mtime":1620265992043,"results":"35","hashOfConfig":"27"},{"size":4116,"mtime":1620556038347,"results":"36","hashOfConfig":"27"},{"size":163,"mtime":1629487949618,"results":"37","hashOfConfig":"38"},{"size":3383,"mtime":1629487938847,"results":"39","hashOfConfig":"38"},{"size":446,"mtime":1629487684001,"results":"40","hashOfConfig":"38"},{"size":4941,"mtime":1629487854250,"results":"41","hashOfConfig":"38"},{"size":8735,"mtime":1629487917705,"results":"42","hashOfConfig":"38"},{"size":1257,"mtime":1629487691437,"results":"43","hashOfConfig":"38"},{"size":8334,"mtime":1629490403997,"results":"44","hashOfConfig":"38"},{"size":4984,"mtime":1629490277808,"results":"45","hashOfConfig":"38"},{"size":1952,"mtime":1629477004118,"results":"46","hashOfConfig":"38"},{"size":3359,"mtime":1629476961168,"results":"47","hashOfConfig":"38"},{"size":250,"mtime":1629487901599,"results":"48","hashOfConfig":"38"},{"size":102,"mtime":1629473595976,"results":"49","hashOfConfig":"38"},{"size":2225,"mtime":1629476979185,"results":"50","hashOfConfig":"38"},{"size":2634,"mtime":1629477027197,"results":"51","hashOfConfig":"38"},{"size":4592,"mtime":1629487903575,"results":"52","hashOfConfig":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"ypqaub",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13az5ej",{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\pecquora-master\\client\\src\\index.js",[],["108","109"],"D:\\pecquora-master\\client\\src\\App.js",[],"D:\\pecquora-master\\client\\src\\components\\Navbar.jsx",[],"D:\\pecquora-master\\client\\src\\components\\Background.jsx",["110"],"import React from \"react\";\r\n\r\n  const Header = () => {\r\n    \r\n    // to get window location!\r\n    const location = window.location.href;\r\n\r\n    return(\r\n        <div style={{padding:\"2rem\"}}>\r\n\r\n        </div>\r\n            \r\n    )\r\n}; \r\n\r\nexport default Header;","D:\\pecquora-master\\client\\src\\components\\QuestionList.jsx",["111","112"],"import React, { useState, useEffect } from \"react\";\r\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport axios from \"../helper/axioshelper\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport \"../StyleSheet/QuestionList.css\";\r\nimport \"../StyleSheet/QuestionBox.css\";\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst QuestionList = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [search, setSearch] = useState([]);\r\n  \r\n  useEffect(() => {\r\n\r\n    axios\r\n      .get(\"/api/all-questions\", { withCredentials:true })\r\n      .then((response) => {\r\n        console.log(response);\r\n        setQuestions(response.data);\r\n      });\r\n    \r\n  }, []);\r\n  \r\n  const Like = (ID) => {\r\n    const url = \"/api/likes\";\r\n\r\n    const data = new FormData();\r\n    data.append(\"id\", ID);\r\n\r\n    axios\r\n      .post(url, data, { withCredentials: true })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n    <div className=\"QuestionList\">\r\n    <div id=\"QuestionSearch\" style={{marginTop:\"20px\"}}>\r\n        <div className=\"QuestionBox_inputField\">\r\n                <input\r\n                type=\"text\"\r\n                placeholder=\"Search for a question\" \r\n                className=\"QuestionBox_inputfield\"\r\n                id=\"searchBar\"\r\n                onChange={(e) => setSearch(e.target.value)}\r\n                value={search}\r\n                />\r\n            </div>\r\n        </div>\r\n      {questions && (\r\n        <div className=\"Questions\">\r\n          {questions.filter((val) =>{\r\n              if(search == \"\") {\r\n                  return val;\r\n              } else if (val.question.toLowerCase().includes(search.toLowerCase())) {\r\n                  return val;\r\n              }\r\n          }).map((question) => {\r\n            return (\r\n              <div className=\"question\" key={question._id}>\r\n                <div className=\"question__profile\">\r\n                  <Avatar src={question.owner_image} alt=\"User Profile\" />\r\n                  <h4>{question.owner}</h4>\r\n                </div>\r\n                <div className=\"question__info\">\r\n                  <div className=\"question__question\">\r\n                    <h4>{question.question}</h4>\r\n                  </div>\r\n                </div>\r\n                <div className=\"question__stats\">\r\n                    <div className=\"likes\" style={{ cursor: \"pointer\" }}>\r\n                      <ThumbUpIcon onClick={() => Like(question._id)} />\r\n                      <h4>{question.upvotes}</h4>\r\n                    </div>\r\n                    <Link className=\"comments\" style ={{textDecoration: \"none\", color: \"white\"}} to= {`/questions/${question._id}`} /*onClick={()=> QuestionID(question._id)}*/ \r\n                    > {/* to redirect user to /answer page */}\r\n                    <div className=\"comments\" style={{ cursor: \"pointer\", textDecoration: \"none\" }}>\r\n                      <ChatIcon />\r\n                    </div>\r\n                    </Link>\r\n                  </div>\r\n              </div>\r\n            );\r\n          }).reverse()}\r\n        </div>\r\n      )}\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionList;","D:\\pecquora-master\\client\\src\\components\\QuestionBox.jsx",[],"D:\\pecquora-master\\client\\src\\helper\\axioshelper.js",[],"D:\\pecquora-master\\client\\src\\components\\AnswerBox.jsx",[],"D:\\pecquora-master\\client\\src\\components\\QuestionById.jsx",["113"],"\r\n//========= to get data (get request) from backend and display over here ==========\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\r\nimport axios from \"../helper/axioshelper\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport \"../StyleSheet/QuestionList.css\";\r\n\r\nconst QuestionById = (props) => {\r\n  const [question, setQuestion] = useState('');\r\n  \r\n  const questionID = props.questionID; // question id from url\r\n\r\n  useEffect(() => {\r\n\r\n    axios\r\n    .get(`/questions/${questionID}/`, { withCredentials:true })\r\n    .then((response) => {\r\n      setQuestion(response.data);\r\n    })\r\n    .catch((error) => {\r\n      console.error(error);\r\n    }); \r\n  },[question]);\r\n  \r\n  \r\n  const Like = (ID) => {\r\n\r\n    const data = new FormData();\r\n    data.append(\"id\", ID);\r\n\r\n    axios\r\n      .post(\"/api/all-question/likes\", data, { withCredentials: true })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  /* flow \r\n     1. get the id of element by \"_id\".\r\n     2. when clicked on comments send the id as argument.\r\n     3. post the id over to backend. \r\n     4. check if id is present in question db or send the id back\r\n     5. make get request and display the id!\r\n    */\r\n\r\n  return (\r\n    \r\n    <div className=\"QuestionList\" style={{marginTop:\"-5rem\"}}>\r\n      {question && (\r\n        <div className=\"Questions\">\r\n        <div className=\"question\" key={question._id}>\r\n        <div className=\"question__profile\">\r\n          <Avatar src={question.owner_image} alt=\"User Profile\" />\r\n          <h4>{question.owner}</h4> \r\n        </div>\r\n        <div className=\"question__info\">\r\n          <div className=\"question__question\">\r\n            <h4>{question.question}</h4>\r\n          </div>\r\n          <div className=\"question__stats\">\r\n            <div className=\"likes\" style={{ cursor: \"pointer\" }}>\r\n              <ThumbUpIcon onClick={() => Like(question._id)} />\r\n              <h4>{question.upvotes}</h4>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      )}\r\n    </div> \r\n  );\r\n};\r\n\r\nexport default QuestionById;","D:\\pecquora-master\\client\\src\\components\\AnswerLIst.jsx",["114","115","116"],"\r\n//========= to get data (get request) from backend and display over here ==========\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\r\nimport axios from \"../helper/axioshelper\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport \"../StyleSheet/QuestionList.css\";\r\n\r\n\r\n\r\nconst QuestionList = (props) => {\r\n  const [answers, setAnswer] = useState([]);\r\n\r\n  const questionID = props.questionID; // question id from url\r\n  const profileImage = props.profileImage;\r\n  const authStatus = props.authStatus;\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`/api/all-answer/${questionID}/`, { withCredentials:true })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setAnswer(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      }); \r\n\r\n  },[]);\r\n  \r\n  \r\n  const Like = (ID) => {\r\n\r\n    const data = new FormData();\r\n    data.append(\"id\", ID);\r\n\r\n    axios\r\n      .post(`/api/answers/likes/${questionID}/`, data, { withCredentials: true })\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  /* flow \r\n     1. get the id of element by \"_id\".\r\n     2. when clicked on comments send the id as argument.\r\n     3. post the id over to backend. \r\n     4. check if id is present in answers db or send the id back\r\n     5. make get request and display the id!\r\n    */\r\n\r\n     return (\r\n        <div className=\"QuestionList\">\r\n          { answers && (\r\n            <div className=\"Questions\">\r\n            { answers.map((answer) => {\r\n                return (\r\n                <div className=\"question\" key={answer._id}>\r\n                    <div className=\"question__profile\">\r\n                      <Avatar src={answer.owner_image} alt=\"User Profile\" />\r\n                      <h4>{answer.owner}</h4>\r\n                    </div>\r\n                     <div className=\"question__info\">\r\n                      <div className=\"question__question\">\r\n                            <h4 >{answer.text}</h4>       \r\n                      </div>\r\n                      <div className=\"question__stats\">\r\n                        <div className=\"likes\" style={{ cursor: \"pointer\" }}>\r\n                          <ThumbUpIcon onClick={() => Like(answer._id)} />\r\n                          <h4>{answer.upvotes}</h4>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  );\r\n                }).reverse()}\r\n            </div>\r\n            )\r\n            }\r\n        </div>\r\n      );\r\n    };\r\n\r\n\r\nexport default QuestionList;\r\n\r\n\r\n\r\n\r\n/* <div className=\"QuestionList\">\r\n          { answers ? (\r\n            <div className=\"Questions\">\r\n            { answers.map((answer) => {\r\n                return (\r\n                <div className=\"question\" key={answer._id}>\r\n                    <div className=\"question__profile\">\r\n                      <Avatar src={answer.owner_image} alt=\"User Profile\" />\r\n                      <h4>{answer.owner}</h4>\r\n                    </div>\r\n                     <div className=\"question__info\">\r\n                      <div className=\"question__question\">\r\n                            <h4 >{answer.text}</h4>       \r\n                      </div>\r\n                      <div className=\"question__stats\">\r\n                        <div className=\"likes\" style={{ cursor: \"pointer\" }}>\r\n                          <ThumbUpIcon onClick={() => Like(answer._id)} />\r\n                          <h4>{answer.upvotes}</h4>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  );\r\n                })}\r\n            </div>\r\n          ) : <div className=\"question\" style={{marginTop:\"50px\", padding:\"30px 2px\"}}>\r\n          <div className=\"question__question\">\r\n            <h4 >No answers for this question as of now, Go ahead and give yours answer!</h4>       \r\n            </div>\r\n            </div> \r\n            }\r\n        </div>\r\n\r\n        */","D:\\pecquora\\client\\src\\index.js",[],"D:\\pecquora\\client\\src\\App.js",[],"D:\\pecquora\\client\\src\\screens\\preloader.jsx",[],"D:\\pecquora\\client\\src\\screens\\SignIn.jsx",["117"],"D:\\pecquora\\client\\src\\screens\\SignUp.jsx",[],"D:\\pecquora\\client\\src\\screens\\QuestionScreen.jsx",[],"D:\\pecquora\\client\\src\\screens\\find.jsx",[],"D:\\pecquora\\client\\src\\components\\QuestionList.jsx",[],"D:\\pecquora\\client\\src\\components\\QuestionBox.jsx",[],"D:\\pecquora\\client\\src\\components\\Navbar.jsx",[],"D:\\pecquora\\client\\src\\components\\Background.jsx",[],"D:\\pecquora\\client\\src\\helper\\axioshelper.js",[],"D:\\pecquora\\client\\src\\components\\AnswerBox.jsx",[],"D:\\pecquora\\client\\src\\components\\QuestionById.jsx",[],"D:\\pecquora\\client\\src\\components\\AnswerLIst.jsx",[],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","severity":1,"message":"123","line":6,"column":11,"nodeType":"124","messageId":"125","endLine":6,"endColumn":19},{"ruleId":"126","severity":1,"message":"127","line":59,"column":35,"nodeType":"128","messageId":"129","endLine":59,"endColumn":37},{"ruleId":"130","severity":1,"message":"131","line":60,"column":25,"nodeType":"132","messageId":"133","endLine":60,"endColumn":27},{"ruleId":"134","severity":1,"message":"135","line":25,"column":5,"nodeType":"136","endLine":25,"endColumn":15,"suggestions":"137"},{"ruleId":"122","severity":1,"message":"138","line":16,"column":9,"nodeType":"124","messageId":"125","endLine":16,"endColumn":21},{"ruleId":"122","severity":1,"message":"139","line":17,"column":9,"nodeType":"124","messageId":"125","endLine":17,"endColumn":19},{"ruleId":"134","severity":1,"message":"135","line":30,"column":5,"nodeType":"136","endLine":30,"endColumn":7,"suggestions":"140"},{"ruleId":"122","severity":1,"message":"141","line":52,"column":19,"nodeType":"124","messageId":"125","endLine":52,"endColumn":27},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'location' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'questionID'. Either include it or remove the dependency array.","ArrayExpression",["144"],"'profileImage' is assigned a value but never used.","'authStatus' is assigned a value but never used.",["145"],"'setImage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [question, questionID]",{"range":"150","text":"151"},"Update the dependencies array to be: [questionID]",{"range":"152","text":"153"},[724,734],"[question, questionID]",[861,863],"[questionID]"]